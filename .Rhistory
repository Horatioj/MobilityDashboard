install.packages(c("broom", "bslib", "cachem", "class", "clock", "cpp11", "curl", "dbplyr", "dials", "digest", "downlit", "dplyr", "DT", "evaluate", "fontawesome", "fs", "future", "future.apply", "gargle", "gdata", "gert", "ggplot2", "glmnet", "googledrive", "googlesheets4", "gtable", "haven", "htmltools", "httpuv", "httr", "httr2", "jsonlite", "KernSmooth", "knitr", "later", "lattice", "magick", "maptools", "MASS", "Matrix", "mgcv", "modeldata", "mvtnorm", "nlme", "nnet", "openssl", "parallelly", "parsnip", "partykit", "patchwork", "pkgbuild", "pkgload", "plotly", "pROC", "processx", "prodlim", "profvis", "progressr", "promises", "ps", "purrr", "quantmod", "Rcpp", "RcppArmadillo", "readxl", "recipes", "remotes", "rgl", "rlang", "rmarkdown", "rsample", "rstudioapi", "sass", "shiny", "sp", "spatial", "survival", "sys", "testthat", "tidymodels", "tinytex", "tseries", "tune", "tzdb", "usethis", "usmap", "uuid", "vctrs", "viridisLite", "vroom", "waldo", "workflowsets", "xfun", "xml2", "xts", "yardstick", "zip", "zoo"))
install.packages('censusxy')
# 假设 A 是一个矩阵
A <- matrix(c(2, 0, 5, 1, 0, 1), nrow = 2, byrow = TRUE)
# 获取矩阵 A 的秩
rank_A <- qr(A)$rank
# 打印秩
print(rank_A)
# 检查是否为满秩
is_full_rank <- rank_A == min(nrow(A), ncol(A))
# 打印结果
print(is_full_rank)
knitr::opts_chunk$set(echo = TRUE)
print(i)
test_list <-list(firt = 1, second = 2, third = 3)
for(i in test_list){
print(i)
}
for (i in 1:length(test_list)){
print(names(test_list)[i])
}
seq_along(test_list)
seq_along(test_list) == 1:length(test_list)
print(i)
for (i in seq_along(test_zero)){
print(i)
}
test_zero <- c()
length(test_zero)
for (i in length(test_zero)){
print(i)
}
# use seq_along()
seq_along(test_list)
seq_along(test_list) == 1:length(test_list)
for (i in seq_along(test_zero)){
print(i)
}
for (i in seq_along(test_zero)){
print(i)
}
color_vec <- c("red", "blue", "yellow", "green", "purple")
sentence_start <- "My color"
for (color in color_vec){
print(paste(sentence_start, color))
}
color_list <- list('Favorite' = 'blue', 'sec favorite' = 'green')
for (i in seq_along(color_list)){
print(paste(names(color_list)[i], 'color is', color_list[[i]]))
}
obser <- data.frame(('Day1') = rnorm(100, mean= 0, sd = 1),
obser <- data.frame('Day1' = rnorm(100, mean= 0, sd = 1),
'Day2' = rnorm(100, mean = 4, sd = 1))
for (i in seq_along(obser)){
print(paste(names(obser)[i], 'mean:))
print(mean(obser[[i]]))
}
obser
''
'
obser <- data.frame('Day1' = rnorm(100, mean= 0, sd = 1),
'Day2' = rnorm(100, mean = 4, sd = 1))
for (i in seq_along(obser)){
print(paste(names(obser)[i], 'mean:'))
print(mean(obser[[i]]))
}
obser['Day1']
clean
ll
ls
for (day in names(obser)){
print(paste(day, 'mean:'))
print(mean(obser[[day]]))
}
vec <- c(15, 238, 59, 2)
total <- 0
for (i in 1:length(vec)){
total = total + i
}
print(total)
print(sum(vec))
vec <- c(15, 238, 59, 2)
total <- 0
for (i in 1:length(vec)){
total = total + vec[i]
}
print(total)
print(sum(vec))
vec <- c(15, 238, 59, 2)
total <- 0
for (i in seq_along(vec)){
total = total + vec[i]
}
print(total)
print(sum(vec))
vec <- c(15, 238, 59, 2)
total <- 0
for (i in vec){
total <- total + i
}
print(total)
print(sum(vec))
numbers <- seq(from = -2, to = 2)
numbers
for (i in numbers){
print(max(0, i))
}
for (i in numbers){
print(~max(0,i))
}
for (i in numbers){
if(i >= 0){
print(i)
}
else {
print(0)
}
}
max
corollas <- read.csv("ToyotaCorolla.csv")
setwd("E:\\RA/")
setwd("E:\\RA/MobDemo/")
shiny::runApp()
c(0:240)
quantile(c(0:240), probs = seq(0, 1, by = 0.2))
shiny::runApp()
runApp()
runApp()
palette <- colorRampPalette(c("forestgreen", "gold1", "brown3"))(100)
colorNumeric(palette, domain = c(0:200))
df <- read_excel('./data/DATA_Public0.3NCR0.1W0.6_0.4.xlsx')
df <- read_excel('./data/DATA_Public0.3NCR0.1W0.6_0.4.xlsx', col_names = FALSE)
runApp()
flow_read <- read_excel("flow_combine.xlsx")
colnames(df) <- c("origin", "dest", "flow")
df <- df %>%
group_by(origin, dest) %>%
summarize(avg_flow = mean(flow)) %>%
filter(origin < dest) %>%
select(origin, dest, avg_flow)
df <- merge(flow_read, df, by=intersect(names(flow_read)[c(1,2)], names(df)[c(1,2)]))
colorNumeric(palette, domain = df$avg_flow)(df$avg_flow[0])
colorNumeric(palette, domain = df$avg_flow)(df$avg_flow[1])
colorNumeric(palette, domain = df$avg_flow)(df$avg_flow[2])
c(0:200)[1]
c(0:200)[2]
colorNumeric(palette, domain = c(0:200))(c(0:200)[1])
runApp()
c(-Inf, 30, 50, 80, 100, 150, 200, Inf)
df$category <- cut(df$avg_flow,
breaks = c(-Inf, 30, 60, 90, 120, 150, 180, Inf),
labels = c("Instantaneous", "Fast", "Short", "Moderate", "Medium", "Long", "Very Long"),
include.lowest = TRUE)
colorNumeric(palette, domain = df$category)(df$category[1])
palette <- colorRampPalette(c("forestgreen", "gold1", "brown3"))(7)
palette.pal <- colorFactor(palette, df$category)
colorNumeric(palette, domain = df$category)
colorNumeric(palette, domain = df$avg_flow)
runApp()
colorFactor(palette, domain = df$category)
colorFactor(palette, domain = df$category)(df$category[1])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
